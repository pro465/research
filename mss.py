l=[
[0],
[0, 1],
[0, 1],
[0, 1, 2],
[0, 1, 2],
[0, 1, 2, 3],
[0, 1, 2, 3],
[0, 1, 2, 5],
[0, 1, 3, 4],
[0, 1, 2, 3, 6],
[0, 1, 2, 3, 7],
[0, 1, 3, 5, 6],
[0, 1, 3, 5, 6],
[0, 1, 2, 3, 4, 9],
[0, 1, 2, 3, 7, 10],
[0, 1, 3, 4, 9, 11],
[0, 1, 3, 5, 7, 8],
[0, 1, 2, 3, 4, 8, 13],
[0, 1, 2, 3, 4, 9, 13],
[0, 1, 2, 5, 8, 9, 10],
[0, 1, 2, 5, 8, 9, 10],
[0, 1, 2, 3, 4, 5, 10, 16],
[0, 1, 2, 3, 4, 5, 11, 16],
[0, 1, 2, 3, 4, 9, 13, 19],
[0, 1, 2, 4, 5, 11, 13, 19],
[0, 1, 2, 5, 6, 7, 15, 18],
[0, 1, 2, 5, 8, 11, 12, 13],
[0, 1, 2, 3, 4, 5, 10, 16, 22],
[0, 1, 2, 3, 4, 5, 11, 16, 23],
[0, 1, 2, 3, 7, 11, 13, 14, 16],
[0, 1, 2, 3, 7, 11, 13, 14, 16],
[0, 1, 2, 5, 8, 11, 14, 15, 16],
[0, 1, 2, 5, 8, 11, 14, 15, 16],
[0, 1, 2, 3, 4, 5, 6, 13, 19, 27],
[0, 1, 2, 3, 4, 5, 11, 16, 23, 28],
[0, 1, 2, 3, 6, 10, 14, 16, 17, 19],
[0, 1, 2, 3, 6, 10, 14, 16, 17, 19],
[0, 1, 2, 3, 7, 11, 15, 17, 18, 20],
[0, 1, 2, 3, 7, 11, 15, 17, 18, 20],
[0, 1, 3, 4, 9, 11, 16, 17, 19, 20],
[0, 1, 3, 4, 9, 11, 16, 17, 19, 20],
[0, 1, 2, 3, 5, 9, 13, 17, 19, 20, 22],
[0, 1, 2, 3, 5, 9, 13, 17, 19, 20, 22],
[0, 1, 2, 3, 6, 10, 14, 18, 20, 21, 23],
[0, 1, 2, 3, 6, 10, 14, 18, 20, 21, 23],
[0, 1, 2, 3, 7, 11, 15, 19, 21, 22, 24],
[0, 1, 2, 3, 7, 11, 15, 19, 21, 22, 24],
[0, 1, 2, 3, 4, 5, 6, 13, 19, 27, 33, 41],
[0, 1, 2, 3, 4, 8, 12, 16, 20, 22, 23, 25],
[0, 1, 2, 3, 4, 9, 14, 16, 21, 22, 24, 25],
[0, 1, 2, 3, 4, 9, 14, 16, 21, 22, 24, 25],
[0, 1, 2, 3, 6, 10, 14, 18, 22, 24, 25, 27],
[0, 1, 2, 3, 6, 10, 14, 18, 22, 24, 25, 27],
[0, 1, 2, 3, 7, 11, 15, 19, 23, 25, 26, 28],
[0, 1, 2, 3, 7, 11, 15, 19, 23, 25, 26, 28],
[0, 1, 2, 3, 4, 7, 9, 15, 16, 18, 26, 36, 46],
[0, 1, 2, 3, 4, 8, 12, 16, 20, 24, 26, 27, 29],
[0, 1, 2, 3, 4, 9, 13, 18, 20, 25, 26, 28, 29],
[0, 1, 2, 3, 4, 9, 13, 18, 20, 25, 26, 28, 29],
[0, 1, 2, 3, 6, 10, 14, 18, 22, 26, 28, 29, 31],
[0, 1, 2, 3, 6, 10, 14, 18, 22, 26, 28, 29, 31],
[0, 1, 2, 3, 7, 11, 15, 19, 23, 27, 29, 30, 32],
[0, 1, 2, 3, 7, 11, 15, 19, 23, 27, 29, 30, 32],
[0, 1, 3, 4, 9, 11, 16, 21, 23, 28, 29, 31, 32],
[0, 1, 3, 4, 9, 11, 16, 21, 23, 28, 29, 31, 32],
[0, 1, 2, 3, 4, 7, 9, 15, 16, 18, 26, 36, 46, 56],
[0, 1, 2, 3, 4, 8, 13, 17, 22, 24, 29, 30, 32, 33],
[0, 1, 2, 3, 4, 9, 14, 18, 23, 25, 30, 31, 33, 34],
[0, 1, 2, 3, 4, 9, 14, 18, 23, 25, 30, 31, 33, 34],
[0, 1, 2, 3, 7, 11, 15, 19, 23, 27, 31, 33, 34, 36],
[0, 1, 2, 3, 7, 11, 15, 19, 23, 27, 31, 33, 34, 36],
[0, 1, 2, 5, 8, 11, 14, 17, 20, 21, 22, 45, 47, 49],
[0, 1, 3, 4, 9, 11, 16, 20, 25, 27, 32, 33, 35, 36],
]

def last_hit(sol):
    i=0
    while True:
        b=False
        for idx,j in enumerate(sol):
            for k in sol[idx:]:
                if i==j+k:
                    b=True
                    break
            if b: break
        if not b: return i-1
        i+=1
def covers(l):
    res = []
    for i in range(len(l)):
        res.append(last_hit(l[:i+1]))
    return res
def tostr(number, base):
    digits = "0123456789abcdefghijklmnopqrstuvwxyz"
    if number == 0:
        return "0"
    result = ""
    while number:
        number, remainder = divmod(number, base)
        result = digits[remainder] + result
    return result
for i,x in enumerate(l):
    if i==len(l)-1 or len(x) != len(l[i+1]):
        print(i, *map(lambda x: tostr(x, 10), (x)))
